/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
import { createSelectionIdBuilder } from "./mocks";
export class MockIVisualHost {
    constructor(colorPalette, selectionManager, tooltipServiceInstance, localeInstance, allowInteractionsInstance, localizationManager, telemetryService, authService, storageService, eventService) {
        this.hostEnv = 1;
        this.colorPaletteInstance = colorPalette;
        this.selectionManager = selectionManager;
        this.tooltipServiceInstance = tooltipServiceInstance;
        this.localeInstance = localeInstance;
        this.allowInteractionsInstance = allowInteractionsInstance;
        this.telemetryService = telemetryService;
        this.authService = authService;
        this.localizationManager = localizationManager;
        this.localStorageService = storageService;
        this.visualEventService = eventService;
    }
    createSelectionIdBuilder() {
        return createSelectionIdBuilder();
    }
    createSelectionManager() {
        return this.selectionManager;
    }
    get colorPalette() {
        return this.colorPaletteInstance;
    }
    get locale() {
        return this.localeInstance.locale;
    }
    set locale(language) {
        this.localeInstance.locale = language;
    }
    applyJsonFilter(filter, objectName, propertyName, action) {
    }
    get telemetry() {
        return this.telemetryService;
    }
    get authenticationService() {
        return this.authenticationService;
    }
    persistProperties(changes) { }
    get tooltipService() {
        return this.tooltipServiceInstance;
    }
    get allowInteractions() {
        return this.allowInteractionsInstance.isEnabled;
    }
    launchUrl(url) {
        window.open(url);
    }
    get storageService() {
        return this.localStorageService;
    }
    get eventService() {
        return this.visualEventService;
    }
    get instanceId() {
        return "instanceId";
    }
    fetchMoreData() {
        return true;
    }
    refreshHostData() {
    }
    createLocalizationManager() {
        return {
            getDisplayName: (key) => ""
        };
    }
}
//# sourceMappingURL=mockVisualHost.js.map