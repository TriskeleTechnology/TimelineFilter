import { getEvent } from "./interactivityUtils";
export class BaseBehavior {
    bindClick() {
        const { elementsSelection } = this.options;
        elementsSelection.on("click", (datum) => {
            const mouseEvent = getEvent() || window.event;
            mouseEvent && this.selectionHandler.handleSelection(datum, mouseEvent.ctrlKey);
        });
    }
    bindClearCatcher() {
        const { clearCatcherSelection } = this.options;
        clearCatcherSelection.on("click", () => {
            const mouseEvent = getEvent() || window.event;
            if (mouseEvent && mouseEvent.ctrlKey) {
                return;
            }
            mouseEvent && mouseEvent.preventDefault();
        });
    }
    bindContextMenu() {
        const { elementsSelection } = this.options;
        elementsSelection.on("contextmenu", (datum) => {
            const event = getEvent() || window.event;
            if (event) {
                this.selectionHandler.handleContextMenu(datum, {
                    x: event.clientX,
                    y: event.clientY
                });
                event.preventDefault();
                event.stopPropagation();
            }
        });
    }
    bindContextMenuToClearCatcher() {
        const { clearCatcherSelection } = this.options;
        const emptySelection = {
            "measures": [],
            "dataMap": {}
        };
        clearCatcherSelection.on("contextmenu", () => {
            const event = getEvent() || window.event;
            if (event) {
                this.selectionHandler.handleContextMenu({
                    identity: emptySelection,
                    selected: false
                }, {
                    x: event.clientX,
                    y: event.clientY
                });
                event.preventDefault();
                event.stopPropagation();
            }
        });
    }
    bindEvents(options, selectionHandler) {
        this.options = options;
        this.selectionHandler = selectionHandler;
        this.bindClick();
        this.bindClearCatcher();
        this.bindContextMenu();
        this.bindContextMenuToClearCatcher();
    }
    renderSelection(hasSelection) {
        if (hasSelection) {
            this.options.elementsSelection.style("opacity", (category) => {
                if (category.selected) {
                    return 1;
                }
                else {
                    return 0.5;
                }
            });
        }
        else {
            this.options.elementsSelection.style("opacity", 1);
        }
    }
}
//# sourceMappingURL=baseBehavior.js.map